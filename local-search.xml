<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/10/19/14/"/>
    <url>/2022/10/19/14/</url>
    
    <content type="html"><![CDATA[<h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h3 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1. 冒泡排序"></a>1. 冒泡排序</h3><p><img src="https://zhjgh.github.io/images/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F.gif" alt="冒泡排序"></p><p>普通版冒泡排序</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">BubbleSort</span>(<span class="hljs-params">array</span>)&#123;<br>    <span class="hljs-keyword">let</span> len = array.<span class="hljs-property">length</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; len-i-<span class="hljs-number">1</span>; j++)&#123;<br>            <span class="hljs-keyword">if</span>(array[j] &gt; array[j+<span class="hljs-number">1</span>])&#123;<br>                [array[j], [array[j+<span class="hljs-number">1</span>]] = [array[j+<span class="hljs-number">1</span>], array[j]];<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> array;<br>&#125;<br></code></pre></td></tr></table></figure><p>优化版冒泡排序</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">BubbleSort</span>(<span class="hljs-params">originalArray</span>)&#123;<br>    <span class="hljs-keyword">const</span> array = [...originalArray];<br>    <span class="hljs-keyword">let</span> swapped;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; array.<span class="hljs-property">length</span>; i++)&#123;<br>        swapped = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; array.<span class="hljs-property">length</span> - i - <span class="hljs-number">1</span>; j++)&#123;<br>            <span class="hljs-keyword">if</span>(array[j] &gt; array[j+<span class="hljs-number">1</span>])&#123;<br>                [array[j], array[j+<span class="hljs-number">1</span>]] = [array[j+<span class="hljs-number">1</span>], array[j]];<br>                swapped = <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(swapped)&#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> array;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2. 选择排序"></a>2. 选择排序</h3><p><img src="https://zhjgh.github.io/images/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F.gif" alt="选择排序"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">SelectionSort</span>(<span class="hljs-params">originalArray</span>)&#123;<br>    <span class="hljs-keyword">const</span> array = [...originalArray];<br>    <span class="hljs-keyword">let</span> len = array.<span class="hljs-property">length</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++)&#123;<br>        <span class="hljs-keyword">let</span> minIndex = i;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j = i + <span class="hljs-number">1</span>; j &lt; len; j++)&#123;<br>            <span class="hljs-keyword">if</span>(array[j] &lt; array[minIndex])&#123;<br>                minIndex = j;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(minIndex !== i)&#123;<br>            [array[minIndex], array[i]] = [array[i], array[minIndex]];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> array;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3. 插入排序"></a>3. 插入排序</h3><p><img src="https://zhjgh.github.io/images/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.gif" alt="插入排序"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">InsertionSort</span>(<span class="hljs-params">originalArray</span>)&#123;<br>    <span class="hljs-keyword">const</span> array = [...originalArray];<br>    <span class="hljs-keyword">let</span> len = array.<span class="hljs-property">length</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)&#123;<br>        <span class="hljs-keyword">let</span> temp = array[i]<br>        <span class="hljs-keyword">let</span> j = i - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(j &gt;= <span class="hljs-number">0</span> &amp;&amp; array[j] &gt; temp)&#123;<br>            array[j+<span class="hljs-number">1</span>] = array[j];<br>            j--;<br>        &#125;<br>        array[j+<span class="hljs-number">1</span>] = temp;<br>    &#125;<br>    <span class="hljs-keyword">return</span> array;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-归并排序"><a href="#4-归并排序" class="headerlink" title="4. 归并排序"></a>4. 归并排序</h3><p><img src="https://zhjgh.github.io/images/%E5%B9%B6%E5%BD%92%E6%8E%92%E5%BA%8F.gif" alt="并归排序"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">MergeSort</span>(<span class="hljs-params">array</span>)&#123;<br>    <span class="hljs-keyword">let</span> len = array.<span class="hljs-property">length</span>;<br>    <span class="hljs-keyword">if</span>(len &lt;= <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> array;<br>    &#125;<br>    <span class="hljs-keyword">let</span> num = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(len / <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">let</span> left = <span class="hljs-title class_">MergeSort</span>(array.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, num));<br>    <span class="hljs-keyword">let</span> right = <span class="hljs-title class_">MergeSort</span>(array.<span class="hljs-title function_">slice</span>(num, len));<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">merge</span>(left, right);<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">left, right</span>)&#123;<br>        <span class="hljs-keyword">let</span> [l, r] = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">let</span> result = [];<br>        <span class="hljs-keyword">while</span>(l &lt; left.<span class="hljs-property">length</span> &amp;&amp; r &lt; right.<span class="hljs-property">length</span>)&#123;<br>            <span class="hljs-keyword">if</span>(left[l] &lt; right[r])&#123;<br>                result.<span class="hljs-title function_">push</span>(left[l]);<br>                l++;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                result.<span class="hljs-title function_">push</span>(right[r]);<br>                r++;<br>            &#125;<br>        &#125;<br>        result = result.<span class="hljs-title function_">concat</span>(left.<span class="hljs-title function_">slice</span>(l, left.<span class="hljs-property">length</span>));<br>        result = result.<span class="hljs-title function_">concat</span>(right.<span class="hljs-title function_">slice</span>(r, right.<span class="hljs-property">length</span>));<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">QuickSort</span>(<span class="hljs-params">array</span>)&#123;<br>    <span class="hljs-keyword">const</span> len = array.<span class="hljs-property">length</span><br>    <span class="hljs-keyword">if</span>(len &lt;= <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> array; <span class="hljs-comment">// 如果只有一个数，就直接返回</span><br>    &#125;<br><br>    <span class="hljs-keyword">let</span> num = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(len / <span class="hljs-number">2</span>); <span class="hljs-comment">// 找到中间数的索引值，如果是浮点数，则向下取整</span><br>    <span class="hljs-keyword">let</span> numValue = array.<span class="hljs-title function_">splice</span>(num, <span class="hljs-number">1</span>); <span class="hljs-comment">// 找到中间数的值</span><br>    <span class="hljs-keyword">let</span> left = []<br>    <span class="hljs-keyword">let</span> right = []<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)&#123;<br>        <span class="hljs-keyword">if</span>(array[i] &lt; numValue)&#123;<br>            left.<span class="hljs-title function_">push</span>(array[i]) <span class="hljs-comment">// 基准点的左边数传到左边数组</span><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            right.<span class="hljs-title function_">push</span>(array[i]) <span class="hljs-comment">// 基准点的右边数传到右边数组</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">QuickSort</span>(left).<span class="hljs-title function_">concat</span>([numValue, <span class="hljs-title class_">QuickSort</span>(right)]);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/08/29/13/"/>
    <url>/2022/08/29/13/</url>
    
    <content type="html"><![CDATA[<h2 id="Vue-响应式原理"><a href="#Vue-响应式原理" class="headerlink" title="Vue 响应式原理"></a>Vue 响应式原理</h2><p>Vue中的三个核心类：</p><ol><li>Observer: 给对象的属性添加getter和setter, 用于<strong>依赖收集</strong>和<strong>派发更新</strong></li><li>Dep: 用于收集当前响应式对象的依赖关系，每个响应式对象都有dep实例。dep.subs &#x3D; watcher[]，当数据发生变更的时候通过dep.notify()通知各个watcher。</li><li>Watcher: 观察者对象，render watcher, computed watcher, user watcher</li></ol><ul><li>依赖收集</li></ul><ol><li>initState, 对computed属性初始化时，就会触发computed watcher依赖收集</li><li>initState, 对监听属性初始化时，触发user watcher依赖收集</li><li>render, 触发render watcher依赖收集</li></ol><ul><li>派发更新</li></ul><ol><li>组件中对响应的数据进行了修改，会触发setter逻辑</li><li>dep.notify()</li><li>遍历所有subs，调用每个watcher的update方法</li></ol><p>总结原理：当创建vue实例时，vue会遍历data里的属性，Object.defineProperty为属性添加getter和setter对数据的读取进行劫持。</p><p>getter: 依赖收集<br>setter: 派发更新</p><p>每个组件的实例都会有对应的watcher实例</p><h2 id="计算属性的实现原理"><a href="#计算属性的实现原理" class="headerlink" title="计算属性的实现原理"></a>计算属性的实现原理</h2><p>computed watcher, 计算属性的监听器</p><p>computed watcher 持有一个dep实例，通过dirty属性标记计算属性是否需要重新求值。</p><p>当computed的依赖值改变后，就会通知订阅的watcher进行更新，对于computed watcher会将dirty属性设置为true,并且进行计算属性方法的调用。</p><ol><li>computed 所谓的缓存是指什么？</li></ol><p>计算属性是基于它的响应式依赖进行缓存的，只有依赖发生改变的时候才会重新求值。</p><ol><li>那computed缓存存在的意义是什么？或者你经常在什么时候使用？</li></ol><p>比如计算属性方法内部操作非常的耗时，遍历一个极大的数组，计算一次可能要耗时1s</p><p>类型转换，格式转换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> largeArray = [<br>    &#123;...&#125;,<br>    &#123;...&#125;,<br>] <span class="hljs-comment">// 10w</span><br><br><span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">1</span><br>&#125;<br><br><span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-attr">currentItem</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> largeArray.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-property">id</span> === <span class="hljs-variable language_">this</span>.<span class="hljs-property">id</span>)<br>    &#125;<br>    <span class="hljs-attr">stringId</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">String</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">id</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>以下情况，computed可以监听到数据的变化吗？</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript">template<br>    &#123;&#123; storageMsg &#125;&#125;<br><br><span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-attr">storageMsg</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> sessionStorage.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;xxx&#x27;</span>)<br>    &#125;,<br>    <span class="hljs-attr">time</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>()<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_">created</span>(<span class="hljs-params"></span>)&#123;<br>    sessionStorage.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;xxx&#x27;</span>, <span class="hljs-number">111</span>)<br>&#125;<br><br><span class="hljs-title function_">onClick</span>(<span class="hljs-params"></span>)&#123;<br>    sessionStorage.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;xxx&#x27;</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>())<br>&#125;<br></code></pre></td></tr></table></figure><p>答案：不会。</p><h2 id="Vue-nextTick的原理"><a href="#Vue-nextTick的原理" class="headerlink" title="Vue.nextTick的原理"></a>Vue.nextTick的原理</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">nextTick</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// TODO</span><br>&#125;)<br><br><span class="hljs-keyword">await</span> <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">nextTick</span>()<br><span class="hljs-comment">// TODO</span><br></code></pre></td></tr></table></figure><p>Vue是异步执行dom更新的，一旦观察到数据的变化，把同一个event loop中观察数据变化的watcher推送进这个队列。在下一次事件循环时，Vue清空异步队列，进行dom的更新</p><p>异步队列执行顺序<br>Promise.then -&gt; MutationObserver -&gt; setImmediate -&gt; setTimeout</p><p>vm.someData &#x3D; ‘new value’, dom并不会马上更新，而是在异步队列被清除时才会更新dom.</p><p>事件循环执行顺序<br>宏任务 -&gt; 微任务队列 -&gt; UI render -&gt; 宏任务</p><p>一般什么时候会用到nextTick呢？</p><p>在数据变化后要执行某个操作，而这个操作依赖因你数据改变而改变的dom，这个操作就应该被放到vue.nextTick回调中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;loaded&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="hljs-keyword">async</span> <span class="hljs-title function_">showDiv</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">loaded</span> = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">await</span> <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">nextTick</span>();<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">test</span>.<span class="hljs-title function_">xxx</span>(); <span class="hljs-comment">// 才能获取到ref</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="手写一个简单的vue-实现响应式更新"><a href="#手写一个简单的vue-实现响应式更新" class="headerlink" title="手写一个简单的vue, 实现响应式更新"></a>手写一个简单的vue, 实现响应式更新</h2><p>1.新建一个目录</p><ul><li>index.html 主页面</li><li>vue.js Vue主文件</li><li>compiler.js 编译模板，解析指令，v-model v-html</li><li>dep.js 收集依赖关系，存储观察者 &#x2F;&#x2F; 以发布订阅的形式实现</li><li>observer.js 数据劫持</li><li>watcher.js 观察者对象类</li></ul><p>2.index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;cn&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>My Vue<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./index.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.初始化vue class, 新建vue.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 包括vue构造函数，接收各种配置参数等等</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Vue</span>&#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">options=&#123;&#125;</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$options</span> = options;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$data</span> = options.<span class="hljs-property">data</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$methods</span> = options.<span class="hljs-property">methods</span>;<br><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">initRootElement</span>(options);<br>        <span class="hljs-comment">// 利用Object.defineProperty将data的属性注入到vue实例中</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_proxyData</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$data</span>);<br>    &#125;<br>    <span class="hljs-comment">// 获取更元素，并存储到vue实例。简单检查一下传入的el是否合规</span><br>    <span class="hljs-title function_">initRootElement</span>(<span class="hljs-params">options</span>)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> options.<span class="hljs-property">el</span> === <span class="hljs-string">&#x27;string&#x27;</span>)&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">$el</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(options.<span class="hljs-property">el</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(options.<span class="hljs-property">el</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">HTMLElement</span>)&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">$el</span> = options.<span class="hljs-property">el</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-variable language_">this</span>.<span class="hljs-property">$el</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;传入的el不合法，请传入css selector或者HTMLElement&#x27;</span>)<br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_">_proxyData</span>(<span class="hljs-params">data</span>)&#123;<br>        <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(data).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> &#123;<br>            <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-variable language_">this</span>, key, &#123;<br>                <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>,<br>                <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span>,<br>                <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;<br>                    <span class="hljs-keyword">return</span> data[key];<br>                &#125;,<br>                <span class="hljs-title function_">set</span>(<span class="hljs-params">newValue</span>)&#123;<br>                    <span class="hljs-keyword">if</span>(data[key] === newValue)&#123;<br>                        <span class="hljs-keyword">return</span>;<br>                    &#125;<br>                    data[key] = newValue<br>                &#125;<br>            &#125;)<br>        &#125;)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.验证一下，新建index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./myvue/vue.js&#x27;</span>;<br><br><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>    <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;hello world&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">methods</span>: &#123;<br>        <span class="hljs-title function_">handle</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-title function_">alert</span>(<span class="hljs-number">111</span>)<br>        &#125;<br>    &#125;<br>&#125;)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(vm)<br></code></pre></td></tr></table></figure><p>5.vue里可以通过this来获取data里的属性</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/07/26/12/"/>
    <url>/2022/07/26/12/</url>
    
    <content type="html"><![CDATA[<h1 id="浏览器缓存机制"><a href="#浏览器缓存机制" class="headerlink" title="浏览器缓存机制"></a>浏览器缓存机制</h1><h2 id="缓存位置"><a href="#缓存位置" class="headerlink" title="缓存位置"></a>缓存位置</h2><p>从缓存位置上来说分为四种，并且各自有优先级，当依次查找缓存且都没有命中的时候，才会去请求网络</p><h3 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h3><blockquote><p>Service Worker 是运行在浏览器背后的独立线程，一般可以用来实现缓存功能。</p></blockquote><h3 id="Memory-Cache"><a href="#Memory-Cache" class="headerlink" title="Memory Cache"></a>Memory Cache</h3><blockquote><p>Memory Cache 也就是内存中的缓存，读取内存中的数据肯定比磁盘快。</p></blockquote><h3 id="Disk-Cache"><a href="#Disk-Cache" class="headerlink" title="Disk Cache"></a>Disk Cache</h3><blockquote><p>Disk Cache 也就是存储在硬盘中的缓存，读取速度慢点，但是什么都能存储到磁盘中，比之 Memory Cache 胜在容量和存储时效性上。</p></blockquote><h3 id="Push-Cache"><a href="#Push-Cache" class="headerlink" title="Push Cache"></a>Push Cache</h3><blockquote><p>Push Cache 是 HTTP&#x2F;2 中的内容，当以上三种缓存都没有命中时，它才会被使用。并且缓存时间也很短暂，只在会话（Session）中存在，一旦会话结束就被释放。</p></blockquote><h2 id="缓存策略"><a href="#缓存策略" class="headerlink" title="缓存策略"></a>缓存策略</h2><h3 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h3><ul><li><p>Expires</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Expires</span>: Wed, <span class="hljs-number">22</span> Oct <span class="hljs-number">2018</span> <span class="hljs-number">08</span>:<span class="hljs-number">41</span>:<span class="hljs-number">00</span> GMT<br></code></pre></td></tr></table></figure><p>Expires 是 HTTP&#x2F;1 的产物，表示资源会在 Wed, 22 Oct 2018 08:41:00 GMT 后过期，需要再次请求。并且 Expires 受限于本地时间，如果修改了本地时间，可能会造成缓存失效。</p></li><li><p>Cache-Control</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">Cache</span><span class="hljs-params">-control</span>: <span class="hljs-keyword">max</span><span class="hljs-params">-age</span>=<span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><p>Cache-Control 出现于 HTTP&#x2F;1.1，优先级高于 Expires 。该属性值表示资源会在 30 秒后过期，需要再次请求。</p></li></ul><h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h3><ul><li>Last-Modified 和 If-Modified-Since<br>Last-Modified 表示本地文件最后修改日期，If-Modified-Since 会将 Last-Modified 的值发送给服务器，询问服务器在该日期后资源是否有更新，有更新的话就会将新的资源发送回来，否则返回 304 状态码。</li></ul><p>但是 Last-Modified 存在一些弊端：</p><ul><li>如果本地打开缓存文件，即使没有对文件进行修改，但还是会造成 Last-Modified 被修改，服务端不能命中缓存导致发送相同的资源</li><li>因为 Last-Modified 只能以秒计时，如果在不可感知的时间内修改完成文件，那么服务端会认为资源还是命中了，不会返回正确的资源</li></ul><p>因为以上这些弊端，所以在 HTTP &#x2F; 1.1 出现了 ETag 。</p><ul><li>ETag 和 If-None-Match<br>ETag 类似于文件指纹，If-None-Match 会将当前 ETag 发送给服务器，询问该资源 ETag 是否变动，有变动的话就将新的资源发送回来。并且 ETag 优先级比 Last-Modified 高。</li></ul><h2 id="实际场景应用缓存策略"><a href="#实际场景应用缓存策略" class="headerlink" title="实际场景应用缓存策略"></a>实际场景应用缓存策略</h2><h3 id="频繁变动的资源"><a href="#频繁变动的资源" class="headerlink" title="频繁变动的资源"></a>频繁变动的资源</h3><p>对于频繁变动的资源，首先需要使用 Cache-Control: no-cache 使浏览器每次都请求服务器，然后配合 ETag 或者 Last-Modified 来验证资源是否有效。这样的做法虽然不能节省请求数量，但是能显著减少响应数据大小。</p><h3 id="代码文件"><a href="#代码文件" class="headerlink" title="代码文件"></a>代码文件</h3><p>这里特指除了 HTML 外的代码文件，因为 HTML 文件一般不缓存或者缓存时间很短。</p><p>一般来说，现在都会使用工具来打包代码，那么我们就可以对文件名进行哈希处理，只有当代码修改后才会生成新的文件名。基于此，我们就可以给代码文件设置缓存有效期一年 Cache-Control: max-age&#x3D;31536000，这样只有当 HTML 文件中引入的文件名发生了改变才会去下载最新的代码文件，否则就一直使用缓存。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/07/15/11/"/>
    <url>/2022/07/15/11/</url>
    
    <content type="html"><![CDATA[<h2 id="HTTP-和-HTTPS-的区别"><a href="#HTTP-和-HTTPS-的区别" class="headerlink" title="HTTP 和 HTTPS 的区别"></a>HTTP 和 HTTPS 的区别</h2><p><a href="https://www.51cto.com/article/701195.html">https://www.51cto.com/article/701195.html</a></p><h2 id="HTTP-常见的状态码"><a href="#HTTP-常见的状态码" class="headerlink" title="HTTP 常见的状态码"></a>HTTP 常见的状态码</h2><p>1 表示消息<br>2 表示成功<br>3 表示重定向<br>4 表示请求错误<br>5 表示服务器错误</p><p><strong>1xx（代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束）</strong></p><ul><li>100（客户端继续发送请求，这是临时响应）：这个临时响应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应</li><li>101：服务器根据客户端的请求切换协议，主要用于websocket或http2升级</li></ul><p><strong>2xx（代表请求已成功被服务器接收、理解、并接受）</strong></p><ul><li>200（成功）：请求已成功，请求所希望的响应头或数据体将随此响应返回</li><li>204（无内容）：服务器成功处理请求，但没有返回任何内容</li></ul><p><strong>3xx（表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向）</strong></p><ul><li>301（永久移动）：请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置</li><li>302（临时移动）： 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求</li><li>304：协商缓存，告诉客户端有缓存，直接使用缓存中的数据，返回页面的只有头部信息，是没有内容部分</li></ul><p><strong>4xx（代表了客户端看起来可能发生了错误，妨碍了服务器的处理）</strong></p><ul><li>400（错误请求）： 服务器不理解请求的语法</li><li>401（未授权）： 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应</li><li>403（禁止）： 服务器拒绝请求</li><li>404（未找到）： 服务器找不到请求的网页</li><li>405（方法禁用）： 禁用请求中指定的方法</li><li>408（请求超时）： 服务器等候请求时发生超时</li></ul><p><strong>5xx（表示服务器无法完成明显有效的请求。这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生）</strong></p><ul><li>500（服务器内部错误）：服务器遇到错误，无法完成请求</li><li>501（尚未实施）：服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码</li><li>502（错误网关）： 服务器作为网关或代理，从上游服务器收到无效响应</li><li>503（服务不可用）： 服务器目前无法使用（由于超载或停机维护）</li><li>504（网关超时）： 服务器作为网关或代理，但是没有及时从上游服务器收到请求</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/06/13/10/"/>
    <url>/2022/06/13/10/</url>
    
    <content type="html"><![CDATA[<h2 id="怎么优化h5加载速度？怎么实现h5页面秒开？"><a href="#怎么优化h5加载速度？怎么实现h5页面秒开？" class="headerlink" title="怎么优化h5加载速度？怎么实现h5页面秒开？"></a>怎么优化h5加载速度？怎么实现h5页面秒开？</h2><p><a href="https://segmentfault.com/a/1190000041701111">https://segmentfault.com/a/1190000041701111</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/05/25/9/"/>
    <url>/2022/05/25/9/</url>
    
    <content type="html"><![CDATA[<h2 id="实现一个compose函数"><a href="#实现一个compose函数" class="headerlink" title="实现一个compose函数"></a>实现一个compose函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">compose</span>(<span class="hljs-params">...fns</span>) &#123; <span class="hljs-comment">// fns是传入的函数</span><br>  <span class="hljs-keyword">const</span> fn = fns.<span class="hljs-title function_">pop</span>();<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">...args</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">fn</span>(...args);<br>    <span class="hljs-keyword">if</span> (fns.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-title function_">compose</span>(...fns);<br>    &#125;<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/04/10/8/"/>
    <url>/2022/04/10/8/</url>
    
    <content type="html"><![CDATA[<h2 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h2><p><strong>防抖定义</strong></p><p>防抖就是要延迟执行，你一直操作触发事件一直不执行，当你停止操作等待多少秒后才执行。</p><p>也就是说不管事件触发频率有多高，一定在事件触发 n 秒后执行。如果在事件触发的 n 秒又触发了这个事件，那就以新事件的事件为准，n 秒后才执行。总之，要等你触发完事件 n 秒内不再触发事件，它才执行。</p><p><strong>手写防抖</strong></p><blockquote><p>根据定义，我们知道要在时间 n 秒后执行，那么我们就用定时器来实现：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params">func, wait</span>) &#123;<br>    <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">...args</span>)&#123;<br>        <span class="hljs-built_in">clearTimeout</span>(timer);<br>        timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            func.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args)<br>        &#125;, wait)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>代码很简单，即当还在触发事件时，就清除 timer，使其在 n 秒后执行，但此写法首次不会立即执行，为其健壮性，需加上判断是否第一次执行的第三个参数 flag，判断其是否立即执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params">event, wait, flag</span>) &#123;<br>    <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">...args</span>) &#123;<br>        <span class="hljs-built_in">clearTimeout</span>(timer)<br>        <span class="hljs-keyword">if</span> (!timer &amp;&amp; flag) &#123;<br>            event.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                event.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args)<br>            &#125;, wait)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>防抖场景</strong></p><p>窗口大小变化，调整样式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, <span class="hljs-title function_">debounce</span>(handleResize, <span class="hljs-number">200</span>))<br></code></pre></td></tr></table></figure><p>搜索框，输入后300毫秒搜索</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">debounce</span>(fetchSelectData, <span class="hljs-number">300</span>)<br></code></pre></td></tr></table></figure><p>表单验证，输入 1000 毫秒后验证</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">debounce</span>(validator, <span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure><p><strong>节流定义</strong><br>顾名思义，一节一节的流，就好似控制水阀，在事件不断触发的过程中，固定时间内执行一次事件。</p><p><strong>手写节流</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">throttle</span>(<span class="hljs-params">func, wait</span>) &#123;<br>    <span class="hljs-keyword">let</span> pre = <span class="hljs-number">0</span>, timer = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">...args</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>() - pre &gt; wait) &#123;<br>            <span class="hljs-built_in">clearTimeout</span>(timer);<br>            timer = <span class="hljs-literal">null</span>;<br>            pre = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>            func.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                func.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args)<br>            &#125;, wait)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>节流场景</strong></p><p>scroll 滚动</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;scroll&#x27;</span>, <span class="hljs-title function_">throttle</span>(handleScroll, <span class="hljs-number">200</span>))<br></code></pre></td></tr></table></figure><p>input 动态搜索</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">throttle</span>(fetchInput, <span class="hljs-number">300</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/29/7/"/>
    <url>/2022/03/29/7/</url>
    
    <content type="html"><![CDATA[<h2 id="怎么判断是否是数组？"><a href="#怎么判断是否是数组？" class="headerlink" title="怎么判断是否是数组？"></a>怎么判断是否是数组？</h2><p><strong>用instanceof判断</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = [];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span>); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p><strong>用Object的toString方法判断</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = [];<br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(a); <span class="hljs-comment">// &quot;[object Array]&quot;</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">apply</span>(a); <span class="hljs-comment">// &quot;[object Array]&quot;</span><br></code></pre></td></tr></table></figure><p><strong>用Array对象的isArray方法判断</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = [];<br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(a); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/20/6/"/>
    <url>/2022/03/20/6/</url>
    
    <content type="html"><![CDATA[<h2 id="微前端是怎么实现的？怎么独立部署？子应用通信怎么做？"><a href="#微前端是怎么实现的？怎么独立部署？子应用通信怎么做？" class="headerlink" title="微前端是怎么实现的？怎么独立部署？子应用通信怎么做？"></a>微前端是怎么实现的？怎么独立部署？子应用通信怎么做？</h2><h2 id="Webpack构建流程"><a href="#Webpack构建流程" class="headerlink" title="Webpack构建流程"></a>Webpack构建流程</h2><ol><li>初始化：启动构建，读取与合并配置参数，加载 Plugin，实例化 Compiler</li><li>编译：从 Entry 出发，针对每个 Module 串行调用对应的 Loader 去翻译文件的内容，再找到该 Module 依赖的 Module，递归地进行编译处理</li><li>输出：将编译后的 Module 组合成 Chunk，将 Chunk 转换成文件，输出到文件系统中</li></ol><p>在webpack运行的生命周期中会广播很多事件，plugin可以监听这些事件，在合适的时机通过webpack提供的api改变输出结果。</p><h2 id="Loader-和-Plugin-的原理和区别"><a href="#Loader-和-Plugin-的原理和区别" class="headerlink" title="Loader 和 Plugin 的原理和区别"></a>Loader 和 Plugin 的原理和区别</h2><ul><li>Loader用于对模块文件进行编译转换和加载处理，在module.rules数组中进行配置，它用于告诉Webpack在遇到哪些文件时使用哪些Loader去加载和转换。</li><li>Plugin用于扩展Webpack功能，实现原理是在构建流程里注入钩子函数，在合适的时机通过webpack提供的api改变输出结果。在plugins数组中进行配置。</li></ul><h2 id="知道BFC吗？使用场景有哪些？"><a href="#知道BFC吗？使用场景有哪些？" class="headerlink" title="知道BFC吗？使用场景有哪些？"></a>知道BFC吗？使用场景有哪些？</h2><p>BFC 即 Block Formatting Contexts (块级格式化上下文)。<br>具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 BFC 具有普通容器所没有的一些特性。通俗一点来讲，可以把 BFC 理解为一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/16/5/"/>
    <url>/2022/03/16/5/</url>
    
    <content type="html"><![CDATA[<h2 id="实现一个数组转树形结构的函数"><a href="#实现一个数组转树形结构的函数" class="headerlink" title="实现一个数组转树形结构的函数"></a>实现一个数组转树形结构的函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> data = [<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;t1&#x27;</span>, <span class="hljs-attr">parentId</span>: <span class="hljs-number">0</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">11</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;t11&#x27;</span>, <span class="hljs-attr">parentId</span>: <span class="hljs-number">1</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">12</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;t12&#x27;</span>, <span class="hljs-attr">parentId</span>: <span class="hljs-number">1</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;t2&#x27;</span>, <span class="hljs-attr">parentId</span>: <span class="hljs-number">0</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">21</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;t21&#x27;</span>, <span class="hljs-attr">parentId</span>: <span class="hljs-number">2</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;t3&#x27;</span>, <span class="hljs-attr">parentId</span>: <span class="hljs-number">0</span> &#125;<br>]<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">arrToTree</span>(<span class="hljs-params">data, id, parentId, children</span>)&#123;<br>  <span class="hljs-keyword">let</span> cloneData = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data))<br>  <span class="hljs-keyword">return</span> cloneData.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">father</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> newArr = cloneData.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">child</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> father[id] === child[parentId]<br>    &#125;)<br>    father[children] = newArr<br>    <span class="hljs-keyword">return</span> father[parentId] === <span class="hljs-number">0</span><br>  &#125;)<br>&#125;<br><br><span class="hljs-keyword">const</span> treeData = <span class="hljs-title function_">arrToTree</span>(data, <span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;parentId&#x27;</span>, <span class="hljs-string">&#x27;children&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/02/26/4/"/>
    <url>/2022/02/26/4/</url>
    
    <content type="html"><![CDATA[<h2 id="使用Redux的好处，以及和Mobx的区别"><a href="#使用Redux的好处，以及和Mobx的区别" class="headerlink" title="使用Redux的好处，以及和Mobx的区别"></a>使用Redux的好处，以及和Mobx的区别</h2><p><strong>Redux的三大优势：</strong></p><ol><li>单一数据源</li><li>状态是只读的</li><li>状态的改变只能通过纯函数改变</li></ol><p><strong>Redux和Mobx区别：</strong></p><ol><li>Redux将数据保存在单一的store中；而Mobx将数据保存在分散的多个store中</li><li>Redux使用简单对象保存数据，需要手动处理变化后的操作；Mobx使用observable保存数据，数据变化后自动处理响应的操作。</li><li>Redux使用的是不可变状态，意味着状态只是只读的，不能直接去修改它，而是应该通过纯函数改变返回一个新的状态；Mobx中的状态是可变的，可以直接对其进行修改</li><li>Redux比较复杂，因为其中的函数式编程思想掌握起来不是那么容易，同时需要借助一系列的中间件来处理异步和副作用；Mobx相对比较简单，在其中有很多的抽象，使用的更多是面向对象的思维</li><li>Redux提供可以进行时间回溯的开发工具，同时其纯函数以及更少的抽象，调试比较容易；Mobx中有更多的抽象和封装，调试起来比较复杂，同时结果也更难以预测</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/01/26/3/"/>
    <url>/2022/01/26/3/</url>
    
    <content type="html"><![CDATA[<h2 id="实现一个Promise-all"><a href="#实现一个Promise-all" class="headerlink" title="实现一个Promise.all"></a>实现一个Promise.all</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">promiseAll</span>(<span class="hljs-params">promises</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolved, rejected</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">let</span> resultCount = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">let</span> results = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(promises.<span class="hljs-property">length</span>);<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; promises.<span class="hljs-property">length</span>; i++)&#123;<br>            promises[i].<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>                resultCount++<br>                results[i] = value<br>                <span class="hljs-keyword">if</span>(resultCount === promises.<span class="hljs-property">length</span>)&#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-title function_">resolved</span>(results)<br>                &#125;<br>            &#125;, <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>                <span class="hljs-title function_">rejected</span>(error)<br>            &#125;)<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/01/25/2/"/>
    <url>/2022/01/25/2/</url>
    
    <content type="html"><![CDATA[<h1 id="VSCode中ESLint和Prettier的冲突解决"><a href="#VSCode中ESLint和Prettier的冲突解决" class="headerlink" title="VSCode中ESLint和Prettier的冲突解决"></a>VSCode中ESLint和Prettier的冲突解决</h1><h3 id="解决方式一"><a href="#解决方式一" class="headerlink" title="解决方式一"></a>解决方式一</h3><h5 id="安装相关依赖"><a href="#安装相关依赖" class="headerlink" title="安装相关依赖"></a>安装相关依赖</h5><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp">yarn <span class="hljs-keyword">add</span> prettier -D --exact<br>yarn <span class="hljs-keyword">add</span> eslint-plugin-prettier -D<br>yarn <span class="hljs-keyword">add</span> eslint-config-prettier -D<br></code></pre></td></tr></table></figure><h5 id="修改eslintrc-js"><a href="#修改eslintrc-js" class="headerlink" title="修改eslintrc.js"></a>修改eslintrc.js</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">extends</span>: [<br>    <span class="hljs-comment">// ... 其余配置</span><br>    <span class="hljs-comment">// 增加下面两行</span><br>    <span class="hljs-string">&#x27;plugin:prettier/recommended&#x27;</span>,<br>    <span class="hljs-string">&#x27;prettier/vue&#x27;</span><br>  ],<br>  <span class="hljs-attr">rules</span>: &#123;<br>    <span class="hljs-comment">// ...其余配置</span><br>    <span class="hljs-string">&quot;prettier/prettier&quot;</span>: <span class="hljs-string">&quot;error&quot;</span>,<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="修改settings-json"><a href="#修改settings-json" class="headerlink" title="修改settings.json"></a>修改settings.json</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-comment">// editor</span><br>  <span class="hljs-string">&quot;editor.formatOnSave&quot;</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 保存立即更改</span><br>  <span class="hljs-string">&quot;editor.codeActionsOnSave&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;source.fixAll.eslint&quot;</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">// For eslint</span><br>  &#125;,<br><br>  <span class="hljs-comment">// eslint</span><br>  <span class="hljs-string">&quot;eslint.options&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;configFile&quot;</span>: <span class="hljs-string">&quot;.eslintrc.js&quot;</span> <span class="hljs-comment">// eslint的配置文件</span><br>  &#125;,<br>  <span class="hljs-string">&quot;eslint.validate&quot;</span>: [<br>    <span class="hljs-string">&quot;html&quot;</span>, <span class="hljs-string">&quot;vue&quot;</span>, <span class="hljs-string">&quot;javascript&quot;</span>, <span class="hljs-string">&quot;javascriptreact&quot;</span><br>  ],<br><br><br>  <span class="hljs-string">&quot;[javascript]&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;editor.defaultFormatter&quot;</span>: <span class="hljs-string">&quot;esbenp.prettier-vscode&quot;</span>   <span class="hljs-comment">// prettier</span><br>  &#125;,<br>  <span class="hljs-string">&quot;[vue]&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;editor.defaultFormatter&quot;</span>: <span class="hljs-string">&quot;esbenp.prettier-vscode&quot;</span>   <span class="hljs-comment">// prettier</span><br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>这样就基本解决了eslint和prettier的冲突的问题，但是代码还是被格式化了两次，一次是在codeActionsOnSave使用eslint进行格式化，一次是在formatOnSave的时候prettier进行格式化</p><h3 id="解决方式二"><a href="#解决方式二" class="headerlink" title="解决方式二"></a>解决方式二</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-comment">// 1. 关闭codeActionsOnSave的格式代码</span><br>  <span class="hljs-comment">//   &quot;editor.codeActionsOnSave&quot;: &#123;</span><br>  <span class="hljs-comment">//       &quot;source.fixAll.eslint&quot;: true // For eslint</span><br>  <span class="hljs-comment">//   &#125;,</span><br><br>  <span class="hljs-comment">// 2. 更改为如下方式格式代码</span><br>  <span class="hljs-string">&quot;eslint.format.enable&quot;</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 使用Eslint作为文件的一种格式规范</span><br>  <span class="hljs-string">&quot;[javascript]&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;editor.defaultFormatter&quot;</span>: <span class="hljs-string">&quot;dbaeumer.vscode-eslint&quot;</span> <span class="hljs-comment">// 格式规范由prettier改为eslint</span><br>  &#125;,<br>  <span class="hljs-string">&quot;[vue]&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;editor.defaultFormatter&quot;</span>: <span class="hljs-string">&quot;dbaeumer.vscode-eslint&quot;</span> <span class="hljs-comment">// 格式规范由prettier改为eslint</span><br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>这样只会在formatOnSave的时候进行代码格式化，而且用的eslint的规范。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>测试</title>
    <link href="/2022/01/17/1/"/>
    <url>/2022/01/17/1/</url>
    
    <content type="html"><![CDATA[<p>这是我的Blog</p><h2 id="大标题"><a href="#大标题" class="headerlink" title="大标题"></a>大标题</h2><h3 id="中标题"><a href="#中标题" class="headerlink" title="中标题"></a>中标题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 角标">$ makedown<br></code></pre></td></tr></table></figure><p>超链接: <a href="https://bor1s-996.github.io/">url</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
